from __future__ import annotations
import fluids.constants
import numpy as np
import matplotlib.pyplot as plt
import warnings
import csv
import datetime

start_time = datetime.datetime.now()

class Deflector:
    def __init__(self, impingement_angle, conductivity, density,
                 standoff_distance, cp, diameter):
        self.impingement_angle = impingement_angle
        self.standoff_distance = standoff_distance
        self.conductivity = conductivity
        self.density = density
        self.cp = cp
        self.dia = diameter

    def Hotspot(self, heat_flux, time):
        heat_flux_imperial = heat_flux / 8.611128
        alpha = 2 * heat_flux_imperial * np.sqrt(time)
        beta = np.sqrt(np.pi * self.density * self.conductivity * self.cp)
        peak_temp_R = alpha / beta + 540
        peak_temp_K = peak_temp_R * (5 / 9)
        return peak_temp_K


class Engine:
    def __init__(self, combustor_temp_K, exit_dia, combustor_pressure_pa, gamma,
                 k, viscosity, cp, massflow, throat_dia, prandtl,
                 r_comb=None, r_ex=None, molecular_weight_c=None,
                 molecular_weight_ex=None,
                 throat_vel=None, prop_name=None):
        self.T_stag = combustor_temp_K
        self.P_stag = combustor_pressure_pa
        self.gamma = gamma
        self.conductivity = k
        self.mu = viscosity
        self.cp = cp
        self.r_c = r_comb
        self.r_ex = r_ex
        self.mw_c = molecular_weight_c
        self.mw_ex = molecular_weight_ex
        self.exit_dia = exit_dia
        self.throat_dia = throat_dia
        self.throat_vel = throat_vel
        self.v_ex = None
        self.a_ex = None
        self.mdot = massflow
        self.Pr = prandtl
        self.prop_name = prop_name

        if [self.mw_c, self.mw_ex] == [self.r_c, self.r_ex]:
            raise Exception(
                "Definition failure, Please specifiy at least " +
                "one molecular weight or value for R")

        # account for single mw value
        if self.mw_ex is None:
            self.mw_ex = self.mw_c
        # account for missing r values
        if self.r_c is None:
            self.r_c = (fluids.constants.gas_constant * 1000) / self.mw_c

        if self.r_ex is None:
            self.r_ex = (fluids.constants.gas_constant * 1000) / self.mw_ex

    def Expand(self, expansion_ratio=None, expansion_pressure=None,
               exhaust_mach=None):
        # Nozzle properties
        nozzle_properties = [expansion_ratio, expansion_pressure, exhaust_mach]
        for i in range(0, len(nozzle_properties)):
            if nozzle_properties[i] is not None:
                nozzle_properties[i] = 1
        if nozzle_properties == [0, 0, 0]:
            if self.throat_dia is not None and self.throat_vel is not None:
                area_ratio = self.exit_dia / self.throat_dia
                Ma_ex = np.sqrt((2 / (self.gamma - 1)) * ((area_ratio ** (
                        (self.gamma - 1) / self.gamma)) - 1))
                stag_pressure_ratio = (1 + ((self.gamma - 1) / 2) * (
                        Ma_ex ** 2)) ** (self.gamma / (self.gamma - 1))
                self.Psa_ex = self.P_stag / stag_pressure_ratio
                self.Tsa_e = self.T_stag / (
                        1 + (((self.gamma - 1) / 2) * Ma_ex ** 2))
                self.a_ex = np.sqrt(self.r_ex * self.Tsa_e)
                self.v_ex = self.a_ex * Ma_ex
            else:
                raise Exception(
                    "Specify nozzle properties when calling the Expand function"
                    + ", or exit ratio during engine definition")
        match nozzle_properties:
            case [1, None, None]:
                self.Psa_ex = expansion_ratio * 101325
                Ma_ex = np.sqrt((((self.P_stag / self.Psa_ex) ** (
                        (self.gamma - 1) / self.gamma)) - 1) * 2 / (
                                        self.gamma - 1))
                self.Tsa_e = self.T_stag / (
                        1 + (((self.gamma - 1) / 2) * Ma_ex ** 2))
                self.a_ex = np.sqrt(self.r_ex * self.Tsa_e)
                self.v_ex = self.a_ex * Ma_ex
            case [None, 1, None]:
                self.Psa_ex = expansion_pressure
                Ma_ex = np.sqrt((((self.P_stag / self.Psa_ex) ** (
                        (self.gamma - 1) / self.gamma)) - 1) * 2 / (
                                        self.gamma - 1))
                self.Tsa_e = self.T_stag / (
                        1 + (((self.gamma - 1) / 2) * Ma_ex ** 2))
                self.a_ex = np.sqrt(self.r_ex * self.Tsa_e)
                self.v_ex = self.a_ex * Ma_ex
            case [None, None, 1]:
                Ma_ex = exhaust_mach
                stag_pressure_ratio = (1 + ((self.gamma - 1) / 2) * (
                        Ma_ex ** 2)) ** (self.gamma / (self.gamma - 1))
                self.Psa_ex = self.P_stag / stag_pressure_ratio
                self.Tsa_e = self.T_stag / (
                        1 + (((self.gamma - 1) / 2) * Ma_ex ** 2))
                self.a_ex = np.sqrt(self.r_ex * self.Tsa_e)
                self.v_ex = self.a_ex * Ma_ex
            case _:
                raise Exception("Please specify exhaust properties")

    def Propagate(self, distance, plume_dia=None):
        if self.v_ex is None:
            raise Exception(
                "Please use the Expand function before calling Propagate")
        if distance < ((self.exit_dia / 2) / 0.053):
            return self.v_ex
        if plume_dia is None:
            plume_dia = self.exit_dia
        v_x = ((10 ** 0.79 - (33 * ((plume_dia ** 2) / distance ** 2)))
               / (distance / plume_dia)) * self.v_ex
        return v_x

    def Deflect(self, D: Deflector):
        standoff_distance = D.standoff_distance
        impingement_angle = D.impingement_angle

        v_impingement = self.Propagate(
            standoff_distance)  # impingement after standoff angle,
        # at centre of plume

        a_ex = np.sqrt(self.r_ex * self.Tsa_e)
        mach_at_impingement = v_impingement / a_ex  # velocity change will be
                            # small, so anticipated speed of sound change is low

        sigma = get_strong_weak_oblique(mach_at_impingement, impingement_angle,
                                        self.gamma)[0]
        # gets the weak shock angle for the impingement that's provided by the FD

        freestream_shock_angle = 180 - (
                90 + impingement_angle + sigma)
        # Angle from freestream to shock normal in deg.

        mach_normal_1 = mach_at_impingement * np.cos(np.deg2rad(
            freestream_shock_angle))
        # take the mach speed normal to the shock angle

        mach_tangent = mach_at_impingement * np.sin(
            np.deg2rad(freestream_shock_angle))
        mach_normal_2 = np.sqrt(
            (1 + ((self.gamma - 1) / 2) * mach_normal_1 ** 2) /
            ((self.gamma * mach_normal_1 ** 2) - ((self.gamma - 1) / 2))
        )  # find mach normal to shock angle after oblique shock

        mach_after_impingement = np.sqrt(mach_normal_2 ** 2 + mach_tangent ** 2)
        Tsa_after_oblique = self.Tsa_e * (
                (1 + ((2 * self.gamma) / (self.gamma + 1)) * (
                        mach_normal_1 ** 2 - 1)) *
                ((2 + (self.gamma - 1) * mach_normal_1 ** 2) / (
                        (self.gamma + 1) * mach_normal_1 ** 2))
        )
        speed_of_sound_after_impingement = np.sqrt(
            self.r_ex * self.gamma * Tsa_after_oblique)
        # speed of sound after temp change through shock
        speed_along_FD = mach_after_impingement * speed_of_sound_after_impingement
        self.flat_plate_speed = speed_along_FD
        self.flat_plate_temp_static = Tsa_after_oblique


def evans_HTC(E: Engine, distance_from_impingement_m):
    # convert all units to us customary
    cp = E.cp * 1000 * 2.402
    # cp BTU/ lb °F
    conductivity = E.conductivity * 0.5781759824
    # conductivity Btu (th) foot/ hour ft^2 °F
    density = (E.Psa_ex * 0.062427962) / (E.r_ex * E.T_stag)
    # density lb/ft3
    viscosity = E.mu * 17.8579688
    # dynamic viscosity lb/ in s
    velocity = E.flat_plate_speed * 3.280839895
    # velocity ft/s
    distance_from_impingement = distance_from_impingement_m * 3.280839895
    # distance ft

    heat_transfer_coefficient_imperial = ((0.0296 *
   (((density * velocity * distance_from_impingement) / viscosity)** (4 / 5))*
       (((cp * viscosity) / conductivity)** (1 / 3)) *
           conductivity)
                      / distance_from_impingement)
    # heat transfer coefficient btu / in^2 sec °F

    heat_transfer_coefficient_metric = (
            heat_transfer_coefficient_imperial * 8.611128)
    return heat_transfer_coefficient_metric


def bartz_HFX(T_Wall, E: Engine, Diameter):
    cp = E.cp * 1000 * 0.2390057361
    # cp BTU / lb °F
    viscosity = E.mu * 0.000145
    # viscocity lbf sec / in
    throat_Dia = E.throat_dia * 39.3701
    # throat diameter in
    Pr = E.Pr
    T_ex = (E.Tsa_e) * (9 / 5)
    # exhaust temperature °R
    T_Wall = (T_Wall) * (9 / 5)
    # wall temperature °R
    Ma = E.v_ex / E.a_ex
    Cstar = ((E.P_stag * (
            np.pi * (E.throat_dia / 2) ** 2)) / E.mdot) * 3.280839895
    # C* ft/s
    g = 32.2
    # gravitation acceleration ft/s^2
    PC = E.P_stag * 0.000145038
    # Chamber Pressure lbf / in^2
    gamma = E.gamma
    exit_Dia = E.exit_dia * 39.3701
    # Exit Diameter in

    sigma = ((((T_Wall / (2 * T_ex)) * (
            1 + ((gamma - 1) / 2 * Ma ** 2))) + 0.5) ** (-0.68) * (
                     (1 + ((gamma - 1) / 2 * Ma ** 2)) ** (-0.12)))

    T_effective = T_ex * ((1 + ((Pr ** 0.33) * ((gamma - 1) / 2 * Ma ** 2))) / (
            1 + ((gamma - 1) / 2 * Ma ** 2)))

    heat_transfer_coefficient = ((((0.026) / (throat_Dia ** 0.2)) * (
            (viscosity ** 0.2 * cp) / (Pr ** 0.6)) *
            ((PC * g) / Cstar) ** 0.8) *
            ((((throat_Dia / 2) ** 2) * np.pi) /
            (((exit_Dia / 2) ** 2) * np.pi) ** 0.9) * sigma)
    # heat transfer coefficient BTU/ in sec °F

    factor = (11356.526682 / 12)

    heat_flux_metric = factor * (heat_transfer_coefficient) * (
        (T_effective - T_Wall))

    return heat_flux_metric


def eckert_HFX(T_wall, E: Engine):
    Pr = E.Pr
    V = E.flat_plate_speed
    Cp = E.cp * 1000
    rho = (E.Psa_ex) / (E.r_ex * E.T_stag)
    mu = E.mu
    Re = (rho * V) / mu
    T_s = E.flat_plate_temp_static
    T_tot = E.T_stag

    print(Pr, V, Cp, rho, mu, Re, T_s, T_tot)

    if rho < 0.075:
        Cf = 0.0296 / (Re ** (0.2))
        # lower values, Blasius equation
    else:
        Cf = 0.37 / ((np.log10(Re)) ** 2.53)
        # higher values of heat flux, schlutz-grunow
    r = Pr ** (1 / 3)
    T_r = (r * (T_tot - T_s)) + T_s
    St = (Cf / 2) * (Pr ** -(2 / 3))

    h = St * (rho * Cp * V)
    flux = h * (T_r - T_wall)
    return flux


def get_strong_weak_oblique(mach1, delta, gamma=1.4):
    delta = np.deg2rad(delta)
    # calculate coefficients
    A = mach1 ** 2 - 1
    B = 0.5 * (gamma + 1) * mach1 ** 4 * np.tan(delta)
    C = (1 + 0.5 * (gamma + 1) * mach1 ** 2) * np.tan(delta)
    coeffs = [1, C, -A, (B - A * C)]

    # roots of a cubic equation, two positive solutions
    roots = np.array([r for r in np.roots(coeffs) if r > 0])

    thetas = np.arctan(1 / roots)
    theta_weak = np.min(thetas)
    theta_strong = np.max(thetas)
    return [np.rad2deg(theta_weak), np.rad2deg(theta_strong)]


def Main():
    T_initial = 20 + 273.15  # Initial deflector temperature,K
    total_Length = 250 / 1000  # total length to determine flux, m
    evans_Startpoint = 2 / 1000  # start of evans approximation, m
    step_Distance = 1 / 1000  # step setting, m

    array_Length = int((total_Length) / step_Distance)
    evans_Length = int((total_Length - evans_Startpoint) / step_Distance)

    IPA_N2O = Engine(combustor_temp_K=3204.0548,
                     exit_dia=86.88 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.2148,
                     k=0.1653,
                     cp=1.7757,
                     viscosity=0.00007441,
                     molecular_weight_c=26.1782,
                     molecular_weight_ex=27.4389,
                     massflow=2.21,
                     throat_dia=38.63 / 1000,
                     prandtl=0.6821,
                     prop_name="IPA_N2O")

    IPA_LOX = Engine(combustor_temp_K=3325.9758,
                     exit_dia=116.97 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.1482,
                     k=0.2614,
                     cp=3.3169,
                     viscosity=0.0000883,
                     molecular_weight_c=23.4,
                     molecular_weight_ex=24.9356,
                     massflow=3.47,
                     throat_dia=50.31 / 1000,
                     prandtl=0.595,
                     prop_name="IPA_LOX")

    ETH_N2O = Engine(combustor_temp_K=3204.0548,
                     exit_dia=86.88 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.2148,
                     k=0.1653,
                     cp=1.7757,
                     viscosity=0.00007441,
                     molecular_weight_c=26.1728,
                     molecular_weight_ex=27.4389,
                     massflow=2.21,
                     throat_dia=38.63 / 1000,
                     prandtl=0.6821,
                     prop_name="ETH_N2O")

    RP1_N2O = Engine(combustor_temp_K=3245.2472,
                     exit_dia=87.05 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.2080,
                     k=0.1606,
                     cp=1.7889,
                     viscosity=0.0000752,
                     molecular_weight_c=27.0252,
                     molecular_weight_ex=28.4406,
                     massflow=2.23,
                     throat_dia=38.54 / 1000,
                     prandtl=0.6736,
                     prop_name="RP1_N2O")

    RP1_LOX = Engine(combustor_temp_K=3536.0211,
                     exit_dia=111.29 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.1588,
                     k=0.2574,
                     cp=3.2179,
                     viscosity=0.00008715,
                     molecular_weight_c=22.9155,
                     molecular_weight_ex=24.5798,
                     massflow=3.07,
                     throat_dia=48.23 / 1000,
                     prandtl=0.4933,
                     prop_name="RP1_LOX")

    PRO_LOX = Engine(combustor_temp_K=3484.1915,
                     exit_dia=110.84 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.1617,
                     k=0.2699,
                     cp=3.1793,
                     viscosity=0.00008657,
                     molecular_weight_c=21.7974,
                     molecular_weight_ex=23.2774,
                     massflow=3,
                     throat_dia=48.11 / 1000,
                     prandtl=0.5134,
                     prop_name="PRO_LOX")

    MET_LOX = Engine(combustor_temp_K=3404.8994,
                     exit_dia=109.71 / 1000,
                     combustor_pressure_pa=3000000,
                     gamma=1.1641,
                     k=0.2812,
                     cp=3.1651,
                     viscosity=0.00008513,
                     molecular_weight_c=20.6749,
                     molecular_weight_ex=21.9536,
                     massflow=2.9,
                     throat_dia=47.67 / 1000,
                     prandtl=0.5542,
                     prop_name="MET_LOX")

    Full_Deflector = Deflector(impingement_angle=10,
                               conductivity=45,
                               density=7850,
                               standoff_distance=(115.49 * 3) / 1000,
                               cp=540,
                               diameter=(381 + 0.5 * (
                                           273.9 - 2 * (9.27))) / 1000)

    Engines = [IPA_LOX, IPA_N2O, ETH_N2O, RP1_LOX, RP1_N2O, PRO_LOX, MET_LOX]

    distance_spread = np.linspace(evans_Startpoint, total_Length,
                                  evans_Length)
    evans_Hs = np.zeros((len(distance_spread), 7))
    evans_Fluxes = evans_Hs
    bartz_Fluxes = np.zeros((7, 1))
    eckert_Fluxes = np.zeros((7, 1))

    for i in range(0, 7):
        Engines[i].Expand(expansion_ratio=1)
        Engines[i].Deflect(Full_Deflector)
        evans_Hs[:, i] = evans_HTC(Engines[i], distance_spread)
        evans_Fluxes[:, i] = np.multiply(evans_Hs[:, i], np.sqrt(
            (T_initial - Engines[i].flat_plate_temp_static) ** 2))

        bartz_Fluxes[i, :] = bartz_HFX(T_initial, Engines[i],
                                       Full_Deflector.dia)
        eckert_Fluxes[i, :] = eckert_HFX(T_initial, Engines[i])

    valid_Output = False
    units = ""
    while not (valid_Output):
        output_Type = input(
            "Enter type of results to output, (F)lux or ("
            "T)emperature?\n").lower()
        if output_Type == "flux" or output_Type == "f":
            valid_Output = True
            units = "(kW)"
            resultindex = 0
            evans_Results = evans_Fluxes / 1000
            bartz_Results = bartz_Fluxes[resultindex] / 1000
            eckert_Results = eckert_Fluxes[resultindex] / 1000
        elif output_Type == "temperature" or output_Type =="t":
            burn_Valid = False
            while not (burn_Valid):
                burn_Input = input(
                    "Please enter an integer burn time in seconds: ")
                try:
                    burn_Time = int(burn_Input)
                    burn_Valid = True
                except:
                    warnings.warn("Please enter an integer for burn time")
                    burn_Valid = False

            valid_Output = True
            units = "(°C)"

            evans_Temps = Full_Deflector.Hotspot(evans_Fluxes, burn_Time)
            bartz_Temps = Full_Deflector.Hotspot(bartz_Fluxes, burn_Time)
            eckert_Temps = Full_Deflector.Hotspot(eckert_Fluxes, burn_Time)

            evans_Results = evans_Temps
            bartz_Results = bartz_Temps
            eckert_Results = eckert_Temps
        else:
            print("Invalid command.")

    fig, ax = plt.subplots()
    plt.xlabel("Distance from impingement point, mm")

    if output_Type == "flux" or output_Type == "f":
        plt.ylabel("Heat flux on deflector, " + units)
    else:
        plt.ylabel("Temperature along deflector, " + units)

    deflector_Results = np.ones((array_Length, 7))

    for k in range(0, 7):
        evans_Start_Index = int(evans_Startpoint / step_Distance)
        deflector_Results[evans_Start_Index:(evans_Start_Index + evans_Length),
        k] = (
                deflector_Results[evans_Start_Index:(
                evans_Start_Index + evans_Length), k] * evans_Results[:,k])

        deflector_Results[0:evans_Start_Index + len(
            evans_Results[evans_Results[:, k] > eckert_Results[k]]), k] = \
        eckert_Results[k]

        deflector_Results[(evans_Start_Index + evans_Length) - len(
            evans_Results[evans_Results[:, k] < bartz_Results[k]]):, k] = \
        bartz_Results[k]
        if deflector_Results[array_Length - 1,k] != bartz_Results[k]:
            warnings.warn(
                "Bartz result unused, length of flux "
                " evaluation should be increased" + "For Engine " +
                str(
                    Engines[k].prop_name),
                category=UserWarning)
        if (np.average(evans_Results[0:20, k]) - eckert_Results[k]) > (
                eckert_Results[k] / 5):
            warnings.warn(
            "Large disagreement between Evans and Eckert detected, "
            "consider changing the evaluation method of the skin friction "
            "coefficient within the eckert_HFX function" + "For Engine " + str(
                    Engines[k].prop_name),
                category=UserWarning)

        distance_list = np.linspace(0, total_Length * 1000, array_Length)
        ax.plot(distance_list, deflector_Results[:, k])

    draw_Graph = input(
        "Draw data graph y/n? \n").lower()
    if draw_Graph == "y":
        plt.show()

    write_CSV = input(
        "Export data as .csv y/n? \n").lower()

    if write_CSV == "y":

        Fields = ["Distance (mm)", "", "", "", "", "", "", "", ""]
        for j in range(1, 8):
            Fields[j] = str(
                "Heat Flux (" + units + ") , " + str(Engines[j-1].prop_name))

        Data = np.column_stack((distance_list, deflector_Results))
        current_time = str(datetime.datetime.now())[:16].replace(
            " ", "-").replace(":", "-")
        with open(str(output_Type) + "_" + current_time + "_MultiEngine.csv",
                  "w",
                  newline="") as f:
            csv_writer = csv.writer(f, dialect="excel")
            csv_writer.writerow(Fields)
            for i in range(0, np.shape(Data)[0]):
                csv_writer.writerow(Data[i, :])

    print("Done! in " + str(datetime.datetime.now() - start_time) + "s")
    return


if __name__ == '__main__':
    Main()
    exit()
